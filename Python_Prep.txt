Creating this document to add most commonly questions asked in a job interview.
Feel free to add more suggestions. I will categorise the questions later on. Kindly support.

1. Difference between JSON and XML data in REST API
- Syntax: JSON (JavaScript Object Notation) uses key-value pairs and arrays to represent data. 
          XML (Extensible Markup Language) uses tags to define elements and attributes to provide additional information about the elements.

- Data Types: JSON supports a limited set of data types including string, number, boolean, null, object and array.
              XML on the other hand can represent any data type as long as it is properly defined in the XML schema.

- Size and Efficiency: JSON is generally more compact than XML which means it takes up less space and is faster to transmit over a network. 
                       This makes it more efficient for use in REST APIs.

- Parsing: JSON can be easily parsed and generated by JavaScript which makes it a good fit for web-based APIs. 
           XML requires a more complex parsing process which can make it slower and more difficult to work with.

- Support: JSON is widely supported in modern programming languages and frameworks including JavaScript, Python, Ruby, Java and C#. 
           XML is also widely supported but may require additional libraries or modules to work with in some languages.

In general, JSON is often preferred for use in REST APIs due to its simplicity, efficiency and widespread support. However, XML is still a valid choice in certain cases, 
particularly when complex data types need to be represented or when interoperability with legacy systems is a concern.


2. Difference between PUT and POST request.
PUT and POST are both HTTP methods to send data to server, but they are used in different scenarios and have different characteristics.
PUT requests are used to update any existing resouce, while POST requests are used to submit new data to the server.

More explanation:
PUT:
(a) Request payload contains the entire representation of the resource.
(b) The server replaces the existing resource with the new representation sent in the request payload.
(c) PUT requests are idempotent, meaning that if the same request is sent multiple times, it will have the same effect as a single request.

POST:
(a) The request payload contains the data to be processed by the server.
(b) The server processes the request payload and may create a new resource based on the data submitted.
(c) POST requests are not idempotent, meaning that if the same request is sent multiple times, it will create a new resource each time.







